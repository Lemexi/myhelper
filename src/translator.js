// /src/translator.js
import { pool } from "./db.js";
import { runLLM } from "./llm.js";

/* ‚îÄ‚îÄ –ú–∞–ø–ø–∏–Ω–≥ —Å–ª–æ–≤/—Ñ–ª–∞–≥–æ–≤ ‚Üí –∫–æ–¥—ã ‚îÄ‚îÄ */
const FlagMap = {
  "üá¨üáß": "en", "üá∫üá∏": "en", "üá®üá¶": "en",
  "üáµüá±": "pl",
  "üá∫üá¶": "uk",
  "üá∑üá∫": "ru",
  "üá®üáø": "cz", "üá®üá≠": "cz"
};

const LangMap = {
  "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "en", "–∞–Ω–≥–ª": "en", "–Ω–∞ –∞–Ω–≥–ª": "en",
  english: "en", eng: "en", en: "en",

  "—á–µ—à—Å–∫–∏–π": "cz", "—á–µ—Å—å–∫": "cz", "—á–µ—à": "cz", "–Ω–∞ —á–µ—à": "cz",
  czech: "cz", cz: "cz", cs: "cz",

  "–ø–æ–ª—å—Å–∫–∏–π": "pl", "–ø–æ–ª—å—Å–∫": "pl", "–Ω–∞ –ø–æ–ª": "pl",
  polish: "pl", pl: "pl",

  "—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π": "uk", "—É–∫—Ä": "uk", "–Ω–∞ —É–∫—Ä": "uk", "—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é": "uk",
  ukrainian: "uk", uk: "uk",

  "—Ä—É—Å—Å–∫–∏–π": "ru", "—Ä—É—Å": "ru", "–Ω–∞ —Ä—É—Å": "ru", "—Ä–æ—Å—ñ–π—Å—å–∫–æ—é": "ru",
  russian: "ru", ru: "ru",
};

export function resolveTargetLangCode(word) {
  if (!word) return null;
  const key = (word || "").toLowerCase().trim();
  if (FlagMap[word]) return FlagMap[word];
  const flag = [...word].find(ch => FlagMap[ch]);
  if (flag) return FlagMap[flag];
  return LangMap[key] || null;
}

/* ‚îÄ‚îÄ –î–µ—Ç–µ–∫—Ç —è–∑—ã–∫–∞ ‚îÄ‚îÄ */
export async function detectLanguage(text) {
  const { text: out } = await runLLM([
    { role: "system", content: "Detect language code among: en,ru,uk,pl,cz. Output only the code." },
    { role: "user", content: text.slice(0, 500) }
  ], { max_tokens: 5 });
  const code = (out || "en").trim().toLowerCase();
  return ["en","ru","uk","pl","cz"].includes(code) ? code : "en";
}

/* ‚îÄ‚îÄ –ö—ç—à –ø–µ—Ä–µ–≤–æ–¥–∞ ‚îÄ‚îÄ */
export async function translateCached(text, sourceLang, targetLang) {
  if (!text || sourceLang === targetLang) return { text, cached: true };

  const sel = `
    SELECT translated_text
    FROM translations_cache
    WHERE source_lang=$1 AND target_lang=$2 AND md5(source_text)=md5($3)
    LIMIT 1
  `;
  const hit = await pool.query(sel, [sourceLang, targetLang, text]);
  if (hit.rows.length) return { text: hit.rows[0].translated_text, cached: true };

  const { text: translated } = await runLLM([
    { role: "system", content: "Translate faithfully with natural style. Output only the translated sentence(s), no explanations." },
    { role: "user", content: `Translate from ${sourceLang} to ${targetLang}:\n${text}` }
  ]);

  const ins = `
    INSERT INTO translations_cache (source_text, source_lang, target_lang, translated_text, by_model)
    VALUES ($1,$2,$3,$4,$5)
    ON CONFLICT DO NOTHING
  `;
  await pool.query(ins, [text, sourceLang, targetLang, translated, "groq"]);
  return { text: translated, cached: false };
}

/* ‚îÄ‚îÄ –ö–∞–Ω–æ–Ω–∏–∑–∞—Ü–∏—è: –≤—Å—ë –≤ EN ‚îÄ‚îÄ */
export async function toEnglishCanonical(text) {
  const src = await detectLanguage(text);
  if (src === "en") return { canonical: text, sourceLang: "en", original: text };
  const { text: canonical } = await translateCached(text, src, "en");
  return { canonical, sourceLang: src, original: text };
}

/* ‚îÄ‚îÄ –ü–µ—Ä–µ–≤–æ–¥ —Å ¬´—É—Å–∏–ª–µ–Ω–∏–µ–º¬ª: —Ü–µ–ª–µ–≤–æ–π + RU; –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ ‚îÄ‚îÄ */
export async function translateWithStyle({ sourceText, targetLang }) {
  const target = (targetLang || "en").toLowerCase();

  // –û—Å–Ω–æ–≤–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (—Å—Ç—Ä–æ–≥–æ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π)
  const { text: styled } = await runLLM([
    {
      role: "system",
      content:
        "Rewrite for B2B WhatsApp: 1‚Äì4 short sentences, confident, warm, persuasive but ethical; soft Cialdini (max 1‚Äì2). " +
        "Output ONLY the rewritten text in the target language. No headings, no quotes, no explanations."
    },
    { role: "user", content: `Target: ${target}\nText:\n${sourceText}` }
  ]);

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É ‚Äî —Ç–æ–≥–¥–∞ –µ–≥–æ –Ω–µ—Ç)
  const { text: altMaybe } = await runLLM([
    {
      role: "system",
      content:
        "Provide ONE alternative rephrase of the user's text in the same target language. " +
        "Keep 1‚Äì4 sentences, same constraints. If the original is already optimal, return exactly an empty string. " +
        "Output only the alternative text (or empty string)."
    },
    { role: "user", content: `Target: ${target}\nText:\n${sourceText}` }
  ]);

  // –†—É—Å—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏
  const styledRu    = target === "ru" ? styled : (await translateCached(styled,   target, "ru")).text;
  const altClean    = (altMaybe || "").trim();
  const altStyled   = altClean ? altClean : "";
  const altStyledRu = altStyled ? (target === "ru" ? altStyled : (await translateCached(altStyled, target, "ru")).text) : "";

  return { targetLang: target, styled, styledRu, altStyled, altStyledRu };
}
