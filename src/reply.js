// /src/reply.js
import { SYSTEM_PROMPT } from "./prompt.js";
import {
  upsertSession, updateContact, saveMessage, loadRecentMessages,
  loadLatestSummary, logReply, getLastAuditCategory, getSession
} from "./db.js";
import { kbFind, kbInsertAnswer } from "./kb.js";
import {
  translateCached, translateWithStyle,
  toEnglishCanonical, detectLanguage
} from "./translator.js";
import {
  classifyCategory, detectName, detectStandaloneName, detectPhone,
  isCmdTeach, parseCmdTeach,
  isCmdTranslate, parseCmdTranslate,
  isCmdAnswerExpensive, honorific, guessGenderByName, extractGreeting
} from "./classifier.js";
import { runLLM } from "./llm.js";

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LLM —Ñ–æ–ª–±—ç–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
async function replyCore(sessionId, userTextEN) {
  const recent = await loadRecentMessages(sessionId, 24);
  const summary = await loadLatestSummary(sessionId);

  const messages = [{ role: "system", content: SYSTEM_PROMPT }];
  if (summary) messages.push({ role: "system", content: `–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø—Ä–æ—à–ª–æ–π –∏—Å—Ç–æ—Ä–∏–∏:\n${summary}` });
  messages.push(...recent);
  messages.push({ role: "user", content: userTextEN });

  const { text } = await runLLM(messages);
  return text;
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
async function handleCmdTranslate(sessionId, rawText, userLang = "ru") {
  const { targetLangWord, text } = parseCmdTranslate(rawText);
  const targetLang = targetLangWord ? targetLangWord : "en";
  if (!text) {
    const msg = "–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã ¬´–ü–µ—Ä–µ–≤–µ–¥–∏¬ª.";
    const { canonical } = await toEnglishCanonical(msg);
    await saveMessage(sessionId, "assistant", canonical, { category: "translate", strategy: "cmd_translate_error" }, "en", userLang, msg, "translate");
    return msg;
  }
  const { styled, styledRu, targetLang: tgt } = await translateWithStyle({ sourceText: text, targetLang });
  const combined = `üîÅ –ü–µ—Ä–µ–≤–æ–¥ (${tgt.toUpperCase()}):\n${styled}\n\nüí¨ –î–ª—è —Ç–µ–±—è (RU):\n${styledRu}`;
  const { canonical } = await toEnglishCanonical(combined);
  await saveMessage(sessionId, "assistant", canonical, { category: "translate", strategy: "cmd_translate" }, "en", userLang, combined, "translate");
  return combined;
}

async function handleCmdTeach(sessionId, rawText, userLang = "ru") {
  const taught = parseCmdTeach(rawText);
  if (!taught) {
    const msg = "–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ ¬´–û—Ç–≤–µ—Ç–∏–ª –±—ã¬ª.";
    const { canonical } = await toEnglishCanonical(msg);
    await saveMessage(sessionId, "assistant", canonical, { category: "teach", strategy: "cmd_teach_error" }, "en", userLang, msg, "teach");
    return msg;
  }
  const lastCat = (await getLastAuditCategory(sessionId)) || "general";
  const kbId = await kbInsertAnswer(lastCat, userLang || "ru", taught, true);
  const out = `‚úÖ –í –±–∞–∑—É –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n\n${taught}`;
  const { canonical } = await toEnglishCanonical(out);
  await saveMessage(sessionId, "assistant", canonical, { category: lastCat, strategy: "cmd_teach", kb_id: kbId }, "en", userLang, out, lastCat);
  return out;
}

async function handleCmdAnswerExpensive(sessionId, userLang = "ru") {
  const kb = (await kbFind("expensive", userLang)) || (await kbFind("expensive", "ru"));
  let answer;
  if (kb?.answer) {
    if (userLang !== "ru") {
      const { text: translated } = await translateCached(kb.answer, "ru", userLang);
      answer = translated;
    } else {
      answer = kb.answer;
    }
  } else {
    answer = await replyCore(sessionId, "Client says it's expensive. Give a brief WhatsApp-style response with value framing and a clear CTA.");
  }
  const { canonical } = await toEnglishCanonical(answer);
  await saveMessage(sessionId, "assistant", canonical, { category: "expensive", strategy: "cmd_answer_expensive" }, "en", userLang, answer, "expensive");
  await logReply(sessionId, "cmd", "expensive", kb?.id || null, null, "trigger: answer expensive");
  return answer;
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–º–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –ø—Ä–æ—Å—å–±–∞ –∏–º–µ–Ω–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
function buildAskName(userLang, rawText) {
  const hi = extractGreeting(rawText); // –∑–µ—Ä–∫–∞–ª–∏–º –µ—Å–ª–∏ –µ—Å—Ç—å
  const askByLang = {
    ru: `${hi ? hi + ". " : ""}–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?`,
    uk: `${hi ? hi + ". " : ""}–ü—ñ–¥–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —è–∫ –≤–∞—Å –∑–≤–∞—Ç–∏, —â–æ–± —è –∑–Ω–∞–≤, —è–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?`,
    pl: `${hi ? hi + ". " : ""}Proszƒô podpowiedzieƒá, jak ma Pan/Pani na imiƒô, ≈ºebym wiedzia≈Ç, jak siƒô zwracaƒá?`,
    cz: `${hi ? hi + ". " : ""}Pros√≠m, jak se jmenujete, a≈• v√≠m, jak v√°s oslovovat?`,
    en: `${hi ? hi + ". " : ""}May I have your name so I know how to address you?`
  };
  return askByLang[userLang] || askByLang["en"];
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ SmartReply ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export async function smartReply(sessionKey, channel, userTextRaw, userLangHint = "ru") {
  const sessionId = await upsertSession(sessionKey, channel);

  // –ö–∞–Ω–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥: –≤—Å—ë –≤ EN, –æ—Ä–∏–≥–∏–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  const { canonical: userTextEN, sourceLang: srcLang, original: origText } = await toEnglishCanonical(userTextRaw);
  const userLang = srcLang || userLangHint;

  // –î–µ—Ç–µ–∫—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  let nameDetected = detectName(userTextRaw) || detectStandaloneName(userTextRaw);
  const phone = detectPhone(userTextRaw);
  if (nameDetected || phone) await updateContact(sessionId, { name: nameDetected, phone });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ (–∫–∞–Ω–æ–Ω EN)
  const userMsgId = await saveMessage(
    sessionId, "user", userTextEN,
    null, "en", userLang, origText, null
  );

  // –ö–æ–º–∞–Ω–¥—ã ‚Äî –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥–æ –≤—Å–µ–≥–æ
  if (isCmdTranslate(userTextRaw)) {
    const out = await handleCmdTranslate(sessionId, userTextRaw, userLang);
    await logReply(sessionId, "cmd", "translate", null, userMsgId, "trigger: translate");
    return out;
  }
  if (isCmdTeach(userTextRaw)) {
    const out = await handleCmdTeach(sessionId, userTextRaw, userLang);
    await logReply(sessionId, "cmd", "teach", null, userMsgId, "trigger: teach");
    return out;
  }
  if (isCmdAnswerExpensive(userTextRaw)) {
    const out = await handleCmdAnswerExpensive(sessionId, userLang);
    await logReply(sessionId, "cmd", "expensive", null, userMsgId, "trigger: answer expensive");
    return out;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏–º, –∑–Ω–∞–µ–º –ª–∏ –∏–º—è –≤ —Å–µ—Å—Å–∏–∏ (–ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞)
  const session = await getSession(sessionId);
  const currentName = session?.user_name?.trim();

  // –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –ù–ï–¢ ‚Üí –∑–µ—Ä–∫–∞–ª–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ –ø—Ä–æ—Å–∏–º –∏–º—è (–æ–¥–∏–Ω —Ä–∞–∑)
  if (!currentName) {
    const ask = buildAskName(userLang, userTextRaw);
    const { canonical } = await toEnglishCanonical(ask);
    await saveMessage(sessionId, "assistant", canonical, { category: "ask_name", strategy: "precheck_name" }, "en", userLang, ask, "ask_name");
    return ask;
  }

  // –î–∞–ª—å—à–µ –æ–±—ã—á–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Üí KB ‚Üí –ø–µ—Ä–µ–≤–æ–¥ ‚Üí LLM
  const category = await classifyCategory(userTextRaw);

  let kb = await kbFind(category, userLang);
  let answer, strategy = "fallback_llm", kbItemId = null;

  if (kb) {
    answer = kb.answer;
    strategy = "kb_hit";
    kbItemId = kb.id;
  } else {
    const kbRu = await kbFind(category, "ru");
    if (kbRu) {
      const { text: translated } = await translateCached(kbRu.answer, "ru", userLang);
      answer = translated;
      strategy = "kb_translated";
      kbItemId = kbRu.id;
    }
  }

  if (!answer) {
    // –§–æ–ª–±—ç–∫ —á–µ—Ä–µ–∑ LLM (–≤ EN) + –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    answer = await replyCore(sessionId, userTextEN);
    const detectedLLM = await detectLanguage(answer);
    if (detectedLLM !== userLang) {
      const { text: translatedOut } = await translateCached(answer, detectedLLM, userLang);
      answer = translatedOut;
    }
  }

  // –û–±—Ä–∞—â–µ–Ω–∏–µ (–°—ç—Ä/–ú—ç–º) —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç ‚Äî –Ω–æ –∏–º—è —É–∂–µ –µ—Å—Ç—å, –ø–æ—ç—Ç–æ–º—É –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
  const finalAnswer = answer;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏ EN
  const { canonical: ansEN } = await toEnglishCanonical(finalAnswer);
  await logReply(sessionId, strategy, category, kbItemId, userMsgId, null);
  await saveMessage(sessionId, "assistant", ansEN, { category, strategy }, "en", userLang, finalAnswer, category);

  return finalAnswer;
}
