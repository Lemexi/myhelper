// /src/classifier.js

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export function norm(s = "") {
  return (s || "")
    .replace(/\u00A0/g, " ")
    .replace(/[¬´¬ª‚Äú‚Äù]/g, '"')
    .replace(/[‚Äô]/g, "'")
    .replace(/\s+/g, " ")
    .trim();
}
export function lower(s = "") { return norm(s).toLowerCase(); }

/* –¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ä–µ–ø–ª–∞–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ ‚Äî –≤—ã—á–∏—Å—Ç–∏–º ¬´—Ü–∏—Ç–∞—Ç—É¬ª */
export function stripQuoted(raw = "") {
  if (!raw) return "";
  const lines = String(raw).split(/\r?\n/);
  const clean = [];
  for (const ln of lines) {
    const l = ln.trim();
    if (!l) continue;
    // 1) –ü—Ä—è–º–∞—è —Ü–∏—Ç–∞—Ç–∞ > ...
    if (/^>/.test(l)) continue;
    // 2) –®–∞–ø–∫–∏ reply-–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if (/^(from:|replying to)/i.test(l)) continue;
    if (/^assistant\b/i.test(l)) continue;
    if (/renovogo\.com/i.test(l)) continue;
    // 3) ¬´–ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ¬ª –ø—Ä–µ–≤—å—é (—á–∞—Å—Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è ¬´‚Ä¶¬ª)
    if (/^https?:\/\//i.test(l)) continue;
    clean.push(l);
  }
  return clean.join("\n").trim();
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–û–ú–ê–ù–î–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

/** ¬´–Ø –±—ã –æ—Ç–≤–µ—Ç–∏–ª/–∞ ‚Ä¶¬ª ‚Äî –ª–æ–≤–∏–º –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã + "—Ç–∞–∫:" */
export function isCmdTeach(raw = "") {
  const t = lower(stripQuoted(raw));
  // –Ω–µ —Ç—Ä–µ–±—É–µ–º —Ç–æ—á–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü —Å–ª–æ–≤–∞ ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ/–¥–µ—Ñ–∏—Å/—ç–º–æ–¥–∑–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ
  return /(—è\s*–±—ã\s*–æ—Ç–≤–µ—Ç–∏–ª(–∞)?|—è\s*–æ—Ç–≤–µ—Ç–∏–ª(–∞)?\s*–±—ã|—è\s*–æ—Ç–≤–µ—Ç–∏–ª(–∞)?|–æ—Ç–≤–µ—Ç–∏–ª(–∞)?\s*–±—ã)(?=[\s:,\-]|$)/i.test(t);
}
export function parseCmdTeach(raw = "") {
  const t = stripQuoted(raw);
  // –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–∞, –≤–∫–ª—é—á–∞—è "—Ç–∞–∫:" (–æ–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ–∫–∞–∂–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ)
  const re = /(—è\s*–±—ã\s*–æ—Ç–≤–µ—Ç–∏–ª(–∞)?|—è\s*–æ—Ç–≤–µ—Ç–∏–ª(–∞)?\s*–±—ã|—è\s*–æ—Ç–≤–µ—Ç–∏–ª(–∞)?|–æ—Ç–≤–µ—Ç–∏–ª(–∞)?\s*–±—ã)[\s:,\-]*([\s\S]+)$/i;
  const m = t.match(re);
  return m ? m[2].trim() : null;
}

/** –°–ø–∏—Å–æ–∫ ¬´—Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞¬ª */
const LANG_TOKENS = ["–ø–µ—Ä–µ–≤–µ–¥–∏","–ø–µ—Ä–µ–∫–ª–∞–¥–∏","translate","translation","tl"];

/** ¬´–ü–µ—Ä–µ–≤–µ–¥–∏ ‚Ä¶¬ª ‚Äî –¥–æ–ø—É—Å–∫–∞–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ, ¬´–Ω–∞ —è–∑—ã–∫¬ª, —Ñ–ª–∞–≥–∏, –∏ –ø—Ä–æ—Å—Ç–æ —Ñ–ª–∞–≥ + —Ç–µ–∫—Å—Ç */
export function isCmdTranslate(raw = "") {
  const hasFlag = /([\u{1F1E6}-\u{1F1FF}]{2})/u.test(raw); // —ç–º–æ–¥–∑–∏-—Ñ–ª–∞–≥–∏
  const t = lower(stripQuoted(raw));
  const hasToken = LANG_TOKENS.some(k => t.startsWith(k) || t.includes(` ${k} `));
  return hasFlag || hasToken;
}

/** –†–∞–∑–±–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º { targetLangWord, text } */
export function parseCmdTranslate(raw = "") {
  const original = stripQuoted(raw);

  // 1) –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–ª–∞–≥ ‚Äî –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–π
  const flagMatch = original.match(/([\u{1F1E6}-\u{1F1FF}]{2})/u);
  const flag = flagMatch ? flagMatch[1] : null;

  // 2) –ü–∞—Ç—Ç–µ—Ä–Ω —Å ¬´–ø–µ—Ä–µ–≤–µ–¥–∏/–ø–µ—Ä–µ–∫–ª–∞–¥–∏/translate [–Ω–∞|to] <—è–∑—ã–∫> : <—Ç–µ–∫—Å—Ç>¬ª
  const re =
    /(?:–ø–µ—Ä–µ–≤–µ–¥–∏|–ø–µ—Ä–µ–∫–ª–∞–¥–∏|translate(?:\s+to)?)\s*(?:–Ω–∞|to)?\s*([A-Za-z–ê-–Ø–∞-—è–Å—ë–á—ó–Ü—ñ–Ñ—î“ê“ë\. ]{0,30})[\s:,\-]*([\s\S]*)$/i;
  const m = original.match(re);
  const langWord = (m?.[1] || "").trim();
  let textPart = (m?.[2] || "").trim();

  // 3) –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –∞ –µ—Å—Ç—å —Ñ–ª–∞–≥ ‚Äî —Ñ–æ—Ä–º–∞—Ç ¬´üá¨üáß –¢–µ–∫—Å—Ç‚Ä¶¬ª
  if (!m && flag) {
    textPart = norm(original.replace(flag, ""));
  }

  // 4) –ò—Ç–æ–≥–æ–≤—ã–π —è–∑—ã–∫-—Å–ª–æ–≤–æ: —Ñ–ª–∞–≥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ
  const targetLangWord = (flag || langWord || "").trim() || null;

  return { targetLangWord, text: textPart };
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø (fallback-–ø—Ä–∞–≤–∏–ª–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export async function classifyCategoryRuleBased(text = "") {
  const t = lower(text);
  if (t.includes("–¥–æ—Ä–æ–≥") || t.includes("price")) return "expensive";
  if (t.includes("–ø–æ—Å–ª–µ –≤–∏–∑") || t.includes("after visa")) return "after_visa";
  if (t.includes("–∫–æ–Ω—Ç—Ä–∞–∫—Ç") || t.includes("agreement")) return "contract";
  if (t.includes("–¥–µ–º–∞–Ω–¥") || t.includes("vacanc")) return "demands";
  return "general";
}
export const classifyCategory = classifyCategoryRuleBased;

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const greetMap = [
  { re: /–¥–æ–±—Ä—ã–π\s*–¥(–µ|—ë)–Ω—å/i, ru: "–î–æ–±—Ä—ã–π –¥–µ–Ω—å" },
  { re: /–¥–æ–±—Ä—ã–π\s*–≤–µ—á–µ—Ä/i,   ru: "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä" },
  { re: /–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π(—Ç–µ)?/i,  ru: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ" },
  { re: /–ø—Ä–∏–≤–µ—Ç/i,           ru: "–ü—Ä–∏–≤–µ—Ç" },
  { re: /\bhello\b/i,        ru: "Hello" },
  { re: /\bhi\b/i,           ru: "Hi" }
];
export function extractGreeting(raw = "") {
  const hit = greetMap.find(g => g.re.test(raw));
  return hit ? hit.ru : null;
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ò–ú–Ø/–¢–ï–õ–ï–§–û–ù ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export function detectNameSentence(text) {
  const m = text?.match(
    /\b(–º–µ–Ω—è –∑–æ–≤—É—Ç|i am|my name is|–º–µ–Ω–µ –∑–≤–∞—Ç–∏|mam na imiƒô|jmenuji se)\s+([A-Z–ê-–Ø–Å–á–Ü–Ñ“ê≈Å≈ö≈ª≈πƒÜ≈É√ìƒé≈†ƒå≈ò√ù√Å√ç√â√ú√ñ√Ñ][\p{L}\-']{1,}\s*[A-Z–ê-–Ø–Å–á–Ü–Ñ“ê≈Å≈ö≈ª≈πƒÜ≈É√ìƒé≈†ƒå≈ò√ù√Å√ç√â√ú√ñ√Ñ\p{L}\-']*)/iu
  );
  return m ? m[2].trim() : null;
}
export function detectStandaloneName(text) {
  const t = norm(text);
  if (/^[A-Z–ê-–Ø–Å–á–Ü–Ñ“ê≈Å≈ö≈ª≈πƒÜ≈É√ìƒé≈†ƒå≈ò√ù√Å√ç√â√ú√ñ√Ñ][A-Za-z–ê-–Ø–∞-—è–Å—ë–á—ó–Ü—ñ–Ñ—î“ê“ë≈Å≈Ç≈ö≈õ≈ª≈º≈π≈∫ƒÜƒá≈É≈Ñ√ì√≥ƒéƒè≈†≈°ƒåƒç≈ò≈ô√ù√Ω√Å√°√ç√≠√â√©√ú√º√ñ√∂√Ñ√§\-']{1,29}$/.test(t)) return t;
  return null;
}
export function detectLeadingName(text) {
  const m = norm(text).match(
    /^([A-Z–ê-–Ø–Å–á–Ü–Ñ“ê≈Å≈ö≈ª≈πƒÜ≈É√ìƒé≈†ƒå≈ò√ù√Å√ç√â√ú√ñ√Ñ][A-Za-z–ê-–Ø–∞-—è–Å—ë–á—ó–Ü—ñ–Ñ—î“ê“ë≈Å≈Ç≈ö≈õ≈ª≈º≈π≈∫ƒÜƒá≈É≈Ñ√ì√≥ƒéƒè≈†≈°ƒåƒç≈ò≈ô√ù√Ω√Å√°√ç√≠√â√©√ú√º√ñ√∂√Ñ√§\-']{1,29})\s*[,‚Äî-]/u
  );
  return m ? m[1].trim() : null;
}
export function detectAnyName(text) {
  return detectNameSentence(text) || detectStandaloneName(text) || detectLeadingName(text);
}
export function detectPhone(text) {
  const m = text?.match(/\+?[0-9][0-9 \-()]{6,}/);
  return m ? m[0].replace(/[^\d+]/g, "") : null;
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–û–õ + –û–ë–†–ê–©–ï–ù–ò–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const FEMALE_ENDINGS = ["–∞","—è","ia","iia","na","ta","ra","la","sha","scha","ska","eva","ina","yna","ena","onna","anna","alla","ella","maria","olga","irina","natalia","natalya","oksana","tatiana","tetiana","svetlana","svitlana","alena","sofia","zofia","ewa","agnieszka","kasia","katarzyna","aleksandra","veronika","veronica"];
export function guessGenderByName(nameRaw = "") {
  const first = lower(nameRaw).split(" ")[0];
  if (!first) return null;
  const maleList = ["alexander","oleksandr","aleksandr","andrzej","jan","tomas","marek","piotr","pavel","pawel","michal","mikhail","sergey","serhii","vasyl","viktor"];
  if (maleList.includes(first)) return "male";
  if (FEMALE_ENDINGS.some(s => first.endsWith(s))) return "female";
  return "male";
}
export function honorific(lang = "ru", gender = "male") {
  const isF = gender === "female";
  switch ((lang || "ru").toLowerCase()) {
    case "ru": return isF ? "–ú—ç–º" : "–°—ç—Ä";
    case "uk": return isF ? "–ü–∞–Ω—ñ" : "–ü–∞–Ω–µ";
    case "pl": return isF ? "Pani" : "Panie";
    case "cz":
    case "cs": return isF ? "Pan√≠" : "Pane";
    case "en": default: return isF ? "Ma‚Äôam" : "Sir";
  }
}
